// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength = 0) {
            return this;
        }
        let str = Array.new(maxLength+1);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length-1] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, d;
        let i = 0;
        let val = 0;
        while (i < length) {
            if (~(str[i] = 45)) { // minus sign
                let d = str[i] - 48;
                let val = (val * 10) + d;
            }
            let i = i + 1;
        }
        if (str[0] = 45) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, abs_val;
        var char c;
        var Array charset;
        var String str;
        let length = 0;
        let charset = Array.new(20);
        let charset[0] = 48;
        let charset[1] = 49;
        let charset[2] = 50;
        let charset[3] = 51;
        let charset[4] = 52;
        let charset[5] = 53;
        let charset[6] = 54;
        let charset[7] = 55;
        let charset[8] = 56;
        let charset[9] = 57;
        let abs_val = Math.abs(val);
        let lastDigit = abs_val - ((abs_val / 10) * 10); // val % 10
        let c = charset[lastDigit]; // use array for mapping, c = lastDigit + 48 doesn't work.
        if (abs_val < 10) {
            // minus sign
            if (abs_val = (-val)) {
                do appendChar(45); 
            }
            do appendChar(c);
            return;
        }
        else{
            do setInt(val / 10);
            do appendChar(c);
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
