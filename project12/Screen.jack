// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        let color = false;
        do Screen.drawRectangle(0, 0, 512, 256);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit, i, j;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        // set the (x % 16)th bit of value to the current color
        let i = x - ((x / 16) * 16);
        let value = Screen.setIthBit(value, i);
        do Memory.poke(16384 + address,value);
        return;
    }

    function int setIthBit(int n, int i) {
        var int value;
        if (~color) {
            // Clear the ith bit by ANDing with the complement of a bitmask with only the ith bit set
            return n & ~(twoToThe[i]);
        }        
        else 
        {
            // Set the ith bit by ORing with a bitmask with only the ith bit set
            return n | (twoToThe[i]);
        }
    }

    function boolean getIthBit(int n, int i) {
        return ~((n & twoToThe[i]) = 0);
    }


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tempx, tempy;
        // swap x1 x2
        if (x1 > x2) {
            let tempx = x1;
            let tempy = y1;
            let x1 = x2;
            let y1 = y2;
            let x2 = tempx;
            let y2 = tempy;
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, y1, x2);
        }
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        else {
            do Screen.drawDiagonalLine(x1, y1, x2, y2);
        }
        return;
    }

    function void drawHorizontalLine(int x1, int y1, int x2) {
        var int dx, a;
        let dx = Math.abs(x1 - x2);
        let a = 0;
        while(~(a > dx)) {
            if ( x1 < x2) {
                do Screen.drawPixel(x1 + a, y1);
            }
            else {
                do Screen.drawPixel(x2 + a, y1);
            }
            let a = a + 1;
        }
        return;
    }

    function void drawVerticalLine(int x1, int y1, int y2) {
        var int dy, b;
        let dy = Math.abs(y1 - y2);
        let b = 0;
        while(~(b > dy)) {
            if ( y1 < y2) {
                do Screen.drawPixel(x1, y1 + b);
            }
            else {
                do Screen.drawPixel(x1, y2 + b);
            }
            let b = b + 1;
        }
        return;
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, y_inc;
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let y_inc = 1;
        if (dy < 0) {
            let y_inc = -1;
        }

        // y increase | y decrease
        while (((~(a > dx)) & (~(b > dy))) | ((~(b < dy)) & (y_inc = -1))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            // decides if to go right, or up:
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + (dy * y_inc);
            }
            else 
            {
                let b = b + y_inc;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy;
        let dy = 0;
        while (~(dy > (y2 - y1))) {
            do Screen.drawLine(x1, y1 + dy, x2, y1 + dy);
            let dy = dy + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int x1, x2, dy;
        let x1 = 0;
        let x2 = 0;
        let dy = -r;
        while (~(dy > r)) {
            let x1 = x - Math.sqrt((r*r) - (dy*dy));
            let x2 = x + Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x1, y+dy, x2, y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
